{
  "version": 3,
  "sources": ["../../mt3/index.ts", "dep:mt3"],
  "sourcesContent": [" /**\n  * Takes two Matrix3s, a and b, and computes the product in the order\n  * that pre-composes b with a.  In other words, the matrix returned will\n  * @param {module:webgl-2d-math.Matrix3} a A matrix.\n  * @param {module:webgl-2d-math.Matrix3} b A matrix.\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} the result.\n  * @memberOf module:webgl-2d-math\n  */\n function multiply(a:Float32Array, b:Float32Array, dst?:Float32Array) {\n   dst = dst || new Float32Array(9);\n   var a00 = a[0 * 3 + 0];\n   var a01 = a[0 * 3 + 1];\n   var a02 = a[0 * 3 + 2];\n   var a10 = a[1 * 3 + 0];\n   var a11 = a[1 * 3 + 1];\n   var a12 = a[1 * 3 + 2];\n   var a20 = a[2 * 3 + 0];\n   var a21 = a[2 * 3 + 1];\n   var a22 = a[2 * 3 + 2];\n   var b00 = b[0 * 3 + 0];\n   var b01 = b[0 * 3 + 1];\n   var b02 = b[0 * 3 + 2];\n   var b10 = b[1 * 3 + 0];\n   var b11 = b[1 * 3 + 1];\n   var b12 = b[1 * 3 + 2];\n   var b20 = b[2 * 3 + 0];\n   var b21 = b[2 * 3 + 1];\n   var b22 = b[2 * 3 + 2];\n \n   dst[0] = b00 * a00 + b01 * a10 + b02 * a20;\n   dst[1] = b00 * a01 + b01 * a11 + b02 * a21;\n   dst[2] = b00 * a02 + b01 * a12 + b02 * a22;\n   dst[3] = b10 * a00 + b11 * a10 + b12 * a20;\n   dst[4] = b10 * a01 + b11 * a11 + b12 * a21;\n   dst[5] = b10 * a02 + b11 * a12 + b12 * a22;\n   dst[6] = b20 * a00 + b21 * a10 + b22 * a20;\n   dst[7] = b20 * a01 + b21 * a11 + b22 * a21;\n   dst[8] = b20 * a02 + b21 * a12 + b22 * a22;\n \n   return dst;\n }\n \n /**\n  * Creates a 3x3 identity matrix\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl2-2d-math.Matrix3} an identity matrix\n  */\n function identity(dst?:Float32Array) {\n   dst = dst || new Float32Array(9);\n   dst[0] = 1;\n   dst[1] = 0;\n   dst[2] = 0;\n   dst[3] = 0;\n   dst[4] = 1;\n   dst[5] = 0;\n   dst[6] = 0;\n   dst[7] = 0;\n   dst[8] = 1;\n \n   return dst;\n }\n \n /**\n  * Creates a 2D projection matrix\n  * @param {number} width width in pixels\n  * @param {number} height height in pixels\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} a projection matrix that converts from pixels to clipspace with Y = 0 at the top.\n  * @memberOf module:webgl-2d-math\n  */\n function projection(width:number, height:number, dst?:Float32Array) {\n   dst = dst || new Float32Array(9);\n   // Note: This matrix flips the Y axis so 0 is at the top.\n \n   dst[0] = 2 / width;\n   dst[1] = 0;\n   dst[2] = 0;\n   dst[3] = 0;\n   dst[4] = -2 / height;\n   dst[5] = 0;\n   dst[6] = -1;\n   dst[7] = 1;\n   dst[8] = 1;\n \n   return dst;\n }\n \n /**\n  * Multiplies by a 2D projection matrix\n  * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\n  * @param {number} width width in pixels\n  * @param {number} height height in pixels\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} the result\n  * @memberOf module:webgl-2d-math\n  */\n function project(m:Float32Array, width:number, height:number, dst?:Float32Array) {\n   return multiply(m, projection(width, height), dst);\n }\n \n /**\n  * Creates a 2D translation matrix\n  * @param {number} tx amount to translate in x\n  * @param {number} ty amount to translate in y\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} a translation matrix that translates by tx and ty.\n  * @memberOf module:webgl-2d-math\n  */\n function translation(tx:number, ty:number, dst?:Float32Array) {\n   dst = dst || new Float32Array(9);\n \n   dst[0] = 1;\n   dst[1] = 0;\n   dst[2] = 0;\n   dst[3] = 0;\n   dst[4] = 1;\n   dst[5] = 0;\n   dst[6] = tx;\n   dst[7] = ty;\n   dst[8] = 1;\n \n   return dst;\n }\n \n /**\n  * Multiplies by a 2D translation matrix\n  * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\n  * @param {number} tx amount to translate in x\n  * @param {number} ty amount to translate in y\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} the result\n  * @memberOf module:webgl-2d-math\n  */\n function translate(m:Float32Array, tx:number, ty:number, dst?:Float32Array) {\n   return multiply(m, translation(tx, ty), dst);\n }\n \n /**\n  * Creates a 2D rotation matrix\n  * @param {number} angleInRadians amount to rotate in radians\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} a rotation matrix that rotates by angleInRadians\n  * @memberOf module:webgl-2d-math\n  */\n function rotation(angleInRadians:number, dst?:Float32Array) {\n   var c = Math.cos(angleInRadians);\n   var s = Math.sin(angleInRadians);\n \n   dst = dst || new Float32Array(9);\n \n   dst[0] = c;\n   dst[1] = -s;\n   dst[2] = 0;\n   dst[3] = s;\n   dst[4] = c;\n   dst[5] = 0;\n   dst[6] = 0;\n   dst[7] = 0;\n   dst[8] = 1;\n \n   return dst;\n }\n \n /**\n  * Multiplies by a 2D rotation matrix\n  * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\n  * @param {number} angleInRadians amount to rotate in radians\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} the result\n  * @memberOf module:webgl-2d-math\n  */\n function rotate(m:Float32Array, angleInRadians:number, dst:Float32Array) {\n   return multiply(m, rotation(angleInRadians), dst);\n }\n \n /**\n  * Creates a 2D scaling matrix\n  * @param {number} sx amount to scale in x\n  * @param {number} sy amount to scale in y\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} a scale matrix that scales by sx and sy.\n  * @memberOf module:webgl-2d-math\n  */\n function scaling(sx:number, sy:number, dst?:Float32Array) {\n   dst = dst || new Float32Array(9);\n \n   dst[0] = sx;\n   dst[1] = 0;\n   dst[2] = 0;\n   dst[3] = 0;\n   dst[4] = sy;\n   dst[5] = 0;\n   dst[6] = 0;\n   dst[7] = 0;\n   dst[8] = 1;\n \n   return dst;\n }\n \n /**\n  * Multiplies by a 2D scaling matrix\n  * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\n  * @param {number} sx amount to scale in x\n  * @param {number} sy amount to scale in y\n  * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\n  * @return {module:webgl-2d-math.Matrix3} the result\n  * @memberOf module:webgl-2d-math\n  */\n function scale(m:Float32Array, sx:number, sy:number, dst?:Float32Array) {\n   return multiply(m, scaling(sx, sy), dst);\n }\n \n function dot(x1:number, y1:number, x2:number, y2:number) {\n   return x1 * x2 + y1 * y2;\n }\n \n function distance(x1:number, y1:number, x2:number, y2:number) {\n   var dx = x1 - x2;\n   var dy = y1 - y2;\n   return Math.sqrt(dx * dx + dy * dy);\n }\n \n function normalize(x:number, y:number) {\n   var l = distance(0, 0, x, y);\n   if (l > 0.00001) {\n     return [x / l, y / l];\n   } else {\n     return [0, 0];\n   }\n }\n \n // i = incident\n // n = normal\n function reflect(ix:number, iy:number, nx:number, ny:number) {\n   // I - 2.0 * dot(N, I) * N.\n   var d = dot(nx, ny, ix, iy);\n   return [ix - 2 * d * nx, iy - 2 * d * ny];\n }\n \n function radToDeg(r:number) {\n   return (r * 180) / Math.PI;\n }\n \n function degToRad(d:number) {\n   return (d * Math.PI) / 180;\n }\n \n function transformPoint(m:Float32Array, v:any) {\n   var v0 = v[0];\n   var v1 = v[1];\n   var d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\n   return [\n     (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d,\n     (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d,\n   ];\n }\n \n function inverse(m:Float32Array, dst:Float32Array) {\n   dst = dst || new Float32Array(9);\n \n   const m00 = m[0 * 3 + 0];\n   const m01 = m[0 * 3 + 1];\n   const m02 = m[0 * 3 + 2];\n   const m10 = m[1 * 3 + 0];\n   const m11 = m[1 * 3 + 1];\n   const m12 = m[1 * 3 + 2];\n   const m20 = m[2 * 3 + 0];\n   const m21 = m[2 * 3 + 1];\n   const m22 = m[2 * 3 + 2];\n \n   const b01 = m22 * m11 - m12 * m21;\n   const b11 = -m22 * m10 + m12 * m20;\n   const b21 = m21 * m10 - m11 * m20;\n \n   const det = m00 * b01 + m01 * b11 + m02 * b21;\n   const invDet = 1.0 / det;\n \n   dst[0] = b01 * invDet;\n   dst[1] = (-m22 * m01 + m02 * m21) * invDet;\n   dst[2] = (m12 * m01 - m02 * m11) * invDet;\n   dst[3] = b11 * invDet;\n   dst[4] = (m22 * m00 - m02 * m20) * invDet;\n   dst[5] = (-m12 * m00 + m02 * m10) * invDet;\n   dst[6] = b21 * invDet;\n   dst[7] = (-m21 * m00 + m01 * m20) * invDet;\n   dst[8] = (m11 * m00 - m01 * m10) * invDet;\n \n   return dst;\n  }\n \nexport default {\n     degToRad,\n     distance,\n     dot,\n     identity,\n     inverse,\n     multiply,\n     normalize,\n     projection,\n     radToDeg,\n     reflect,\n     rotation,\n     rotate,\n     scaling,\n     scale,\n     transformPoint,\n     translation,\n     translate,\n     project\n};\n ", "import d from \"./node_modules/mt3/index.ts\";export default d;"],
  "mappings": "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",
  "names": []
}
